**Replacing a character in a string
#include<stdio.h>
#include<string.h>
void strreplace(char *, char, char);
int main()
{
	char s[10],chr,rep_chr;
	clrscr();
	printf("Enter a string: ");
	scanf("%s", &s);
	printf("\n Enter character to be replaced: ");
	scanf("%s", &chr);
	printf("\nEnter replacement character: ");
	scanf("%s", &rep_chr);
	strreplace(s,chr,rep_chr);
	getch();
	return 0;
}
void strreplace(char s[], char chr, char rep_chr)
{
	int i=0;
	do
	{
		if(s[i]==chr)
		{
			s[i]=rep_chr;
		}
	i++;
	}while(s[i]!='\0');
	printf("\n Modified string after replacement is: %s",s);
}
-------------------------------------------------------------
**Error handling in c
#include <stdio.h>       
#include <errno.h>       
#include <string.h> 
 
int main ()
{
    FILE *fp;
 
    /* 
        If a file, which does not exists, is opened,
        we will get an error
    */ 
    fp = fopen("IWillReturnError.txt", "r");
 
    printf("Value of errno: %d\n ", errno);
    printf("The error message is : %s\n", strerror(errno));
    perror("Message from perror");
 
    return 0;
}
--------------------------------------------------------------
**working with enum operator
#include <stdio.h>
enum day {sunday = 1, monday, tuesday = 5,
          wednesday, thursday = 10, friday, saturday};
 
int main()
{
    printf("%d %d %d %d %d %d %d", sunday, monday, tuesday,
            wednesday, thursday, friday, saturday);
    return 0;
}
==============================
#include <stdio.h>
enum State {WORKING = 0, FAILED, FREEZED};
enum State currState = 2;
 
enum State FindState() {
    return currState;
}
 
int main() {
   (FindState() == WORKING)? printf("WORKING"): printf("NOT WORKING");
   return 0;
}
----------------------------------------------------------------
**File creation reading and writing
#include<stdio.h>  
#include<conio.h>  
void main(){  
FILE *fp;  
char c;  
clrscr();  
fp=fopen("txtfile.txt","r");  
  
while((c=fgetc(fp))!=EOF){  
printf("%c",c);  
}  
  
rewind(fp);//moves the file pointer at beginning of the file  
  
while((c=fgetc(fp))!=EOF){  
printf("%c",c);  
}  
  
fclose(fp);    
getch();    
} 
============================
#include<stdio.h>  
#include<conio.h>  
void main(){  
FILE *fp;  
char c;  
clrscr();  
fp=fopen("file.txt","w");
fprintf(fp,"Alla")  
fclose(fp);    
getch();    
}       
--------------------------------------------------------------------
**working with pointers
#include<stdio.h>  
int main(){  
int number=50;      
int *p;//pointer to int    
int **p2;//pointer to pointer        
p=&number;//stores the address of number variable      
p2=&p;    
printf("Address of number variable is %x \n",&number);      
printf("Address of p variable is %x \n",p);      
printf("Value of *p variable is %d \n",*p);      
printf("Address of p2 variable is %x \n",p2);      
printf("Value of **p2 variable is %d \n",*p);      
return 0;  
}   
=========================
int main(){  
int number=50;        
int *p;//pointer to int      
p=&number;//stores the address of number variable        
printf("Address of p variable is %u \n",p);        
p=p+3;   //adding 3 to pointer variable    
printf("After adding 3: Address of p variable is %u \n",p);       
return 0;  
}   
------------------------------------------------------------------
** continue program
#include<stdio.h>  
int main(){  
int i=1;//initializing a local variable       
//starting a loop from 1 to 10    
for(i=1;i<=10;i++){      
if(i==5){//if value of i is equal to 5, it will continue the loop    
continue;    
}    
printf("%d \n",i);    
}//end of for loop    
return 0;  
}    
-----------------------------------------------------------------
**giving arguments dynamically
#include <stdio.h>
#include <conio.h>

int main(int a, char *b[])
{
    int i;
    if( a>= 2 )
    {
        printf("The arguments supplied are:\n");
        for(i = 1; i < a; i++)
        {
            printf("%s\t", b[i]);
        }
    }
    else
    {
        printf("argument list is empty.\n");
    }
    return 0;
}
----------------------------------------------------------